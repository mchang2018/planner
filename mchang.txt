package assignment2;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.border.*;

public class Main {
	public static void main(String[] args) {
		JFrame frame = new JFrame("Assignment 2 - Calendar");
		// initialize CalendarFrame which is the JPanel that holds the actual calendar with all months and days
		CalendarFrame calendar = new CalendarFrame();
		
		// create calendar header which has the SCU logo
		JPanel header = new JPanel(new FlowLayout(FlowLayout.CENTER, 80, 0));
		header.setBackground(Color.black);
		
		// create logo
		JLabel logo = new JLabel();
		ImageIcon imageIcon = new ImageIcon(new ImageIcon("sculogo.png").getImage().getScaledInstance(70, 70, Image.SCALE_SMOOTH));
		logo.setIcon(imageIcon);
		logo.setBorder( new EmptyBorder(20, 10, 20, 10));
		header.add(logo);
		
		// create the JLabel that displays the year 2019
		JLabel year = new JLabel("2019", SwingConstants.CENTER);
		year.setFont(new Font("Serif", Font.PLAIN, 24));
		year.setForeground(Color.white);
		header.add(year);

		JPanel radioButtonPanel = new JPanel(new FlowLayout());
		
		// create radio buttons that allow user to select view
		JRadioButton monthView = new JRadioButton("Month");
		monthView.setSelected(true);
		JRadioButton weekView = new JRadioButton("Week");
		JRadioButton dayView = new JRadioButton("Day");
		
		monthView.setForeground(Color.black);
		weekView.setForeground(Color.black);
		dayView.setForeground(Color.black);
		
		radioButtonPanel.add(monthView); radioButtonPanel.add(weekView); radioButtonPanel.add(dayView); 
		
		ButtonGroup viewButtons = new ButtonGroup();
		viewButtons.add(monthView); viewButtons.add(weekView); viewButtons.add(dayView);
		
		// add action listener to each radio button
		monthView.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// set all day panels to month view size
				MonthFrame[] mPanels = calendar.getMonthPanels();
				for (int i = 0; i < mPanels.length; i++) {
					DayPanel[] dPanels = mPanels[i].getDayPanels();
					for (int j = 0; j < dPanels.length; j++) {
						dPanels[j].setMonthView();
						dPanels[j].revalidate();
						dPanels[j].getIgnoreRepaint();
					}
				}
			}
		});
		
		weekView.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// set all day panels to week view size
				MonthFrame[] mPanels = calendar.getMonthPanels();
				for (int i = 0; i < mPanels.length; i++) {
					DayPanel[] dPanels = mPanels[i].getDayPanels();
					for (int j = 0; j < dPanels.length; j++) {
						dPanels[j].setWeekView();
						dPanels[j].revalidate();
						dPanels[j].getIgnoreRepaint();
					}
				}
			}
		});
		
		dayView.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// hide week headers
				calendar.hideWeekHeaders();
				// set all day panels to day view size
				MonthFrame[] mPanels = calendar.getMonthPanels();
				for (int i = 0; i < mPanels.length; i++) {
					DayPanel[] dPanels = mPanels[i].getDayPanels();
					for (int j = 0; j < dPanels.length; j++) {
						dPanels[j].setDayView();
						dPanels[j].revalidate();
						dPanels[j].getIgnoreRepaint();
					}
				}
			}
		});
		
		// header.add(monthView); header.add(weekView); header.add(dayView);	
		header.add(radioButtonPanel);
		
		// create side panel that allows user to add/remove events to/from calendar
		SidePanel sidePnl = new SidePanel(calendar);
		
		// add all the components to main frame
		frame.add(header, BorderLayout.NORTH);
		frame.add(calendar, BorderLayout.CENTER);
		frame.add(sidePnl, BorderLayout.EAST);
		frame.setSize(1250, 700);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}


package assignment2;

import javax.swing.*;
import java.awt.*;

public class CalendarFrame extends JPanel {
	private JScrollPane scrollPane;
	private JPanel calendarPanel;
	private Month[] fullYear;
	private MonthFrame[] monthPanels;
	private JPanel weekHeaders;
	
	public CalendarFrame() {
		monthPanels = new MonthFrame[12];
		// create the full year JPanel by creating 12 MonthFrame Objects
		fullYear = new Month[] { new Month(1, 31, "January"), new Month(2, 28, "February"), new Month(3, 31, "March"),
								 new Month(4, 30, "April"), new Month(5, 31, "May"), new Month(6, 30, "June"),
								 new Month(7, 31, "July"), new Month(8, 31, "August"), new Month(9, 30, "September"),
								 new Month(10, 31, "October"), new Month(11, 30, "November"), new Month(12, 31, "December")};

		this.setLayout(new BorderLayout());
		
		// create days of week headers
		String[] weekDays = new String[] {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
		weekHeaders = new JPanel(new GridLayout(1, 7));
		weekHeaders.setBackground(Color.red.darker());
		for (int i = 0; i < 7; i++) {
			JLabel wkDay = new JLabel(weekDays[i], SwingConstants.CENTER);
			wkDay.setFont(new Font("Serif", Font.PLAIN, 14));
			wkDay.setForeground(Color.white);
			wkDay.setPreferredSize(new Dimension(100, 70));
			weekHeaders.add(wkDay);
		}
		
		calendarPanel = new JPanel(new GridLayout(0, 1, 0, 50));
		
		for (int i = 0; i < 12; i++) {
			MonthFrame newMonthPanel = new MonthFrame(fullYear[i]);
			calendarPanel.add(newMonthPanel);
			monthPanels[i] = newMonthPanel;
		}
		
		scrollPane = new JScrollPane(calendarPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		scrollPane.getVerticalScrollBar().setUnitIncrement(15);
		scrollPane.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE);
		
		this.add(weekHeaders, BorderLayout.NORTH);
		this.add(scrollPane, BorderLayout.CENTER);
	}
	
	// This method returns a specific month panel in a year
	public MonthFrame getMonthFrame(int month) {
		return monthPanels[month - 1];
	}
	
	// This method returns a specific month in a year
	public Month getMonth(int month) {
		return fullYear[month - 1];
	}
	
	// This method returns the MonthFrame array
	public MonthFrame[] getMonthPanels() {
		return this.monthPanels;
	}
	
	// This method hides the week headers
	public void hideWeekHeaders() {
		this.weekHeaders.setVisible(false);
	}
}


package assignment2;

import javax.swing.*;
import java.awt.*;

public class MonthFrame extends JPanel{
	private Month month;
	private JPanel monthPanel;
	private DayPanel[] daysArray;
	
	public MonthFrame(Month month) {
		this.month = month;
		daysArray = new DayPanel[this.month.getNumOfDays()];
		this.setLayout(new BorderLayout(0, 25));
		
		// add the name of the month on top of monthPanel using a JLabel
		JLabel monthName = new JLabel(this.month.getMonthName(), SwingConstants.CENTER);
		monthName.setFont(new Font("Serif", Font.BOLD, 24));
		monthName.setForeground(Color.red.darker());
		this.add(monthName, BorderLayout.NORTH);
		
		// initialize monthPanel (panel that actually has all the days of the month)
		monthPanel = new JPanel();
		monthPanel.setLayout(new GridLayout(0, 7, 5, 5));
		
		// skip grids/days until we reach the day of the week the month is supposed to start on (need to fill with empty date boxes)
		for (int i = 0; i < this.month.getFirstDayOfMonth(); i++) {
			monthPanel.add(new JLabel(" "));
		}
		// add the day panels to the month panel
		for (int i = 0; i < this.month.getNumOfDays(); i++) {
			DayPanel newDayPanel = new DayPanel(this.month.getDay(i));
			monthPanel.add(newDayPanel);
			daysArray[i] = newDayPanel;
		}
		this.add(monthPanel, BorderLayout.CENTER);
	}
	
	// This method returns a specific day panel in a month
	public DayPanel getDayPanel(int day) {
		return daysArray[day - 1];
	}
	
	public DayPanel[] getDayPanels() {
		return this.daysArray;
	}
}



package assignment2;

import javax.swing.*;
import java.awt.*;
import javax.swing.border.*;
import java.util.ArrayList;

public class DayPanel extends JPanel {
	private Day day;
	private JLabel date;
	private JPanel dateBox;
	private JLabel events;
	private ArrayList<String> eventNames;
	private Color textColor;
	
	public DayPanel(Day day) {
		this.day = day;
		this.setLayout(new BorderLayout());
		
		// initialize the date JLabel which holds the actual date (day number) 
		date = new JLabel(day.getMonth() + " " + String.valueOf(this.day.getDayOfMonth()), SwingConstants.CENTER);
		date.setForeground(Color.white);
		date.setOpaque(true); date.setBackground(Color.red);
		this.add(date, BorderLayout.NORTH);
		
		// initialize dateBox JPanel, the box underneath the date 
		dateBox = new JPanel();
		dateBox.setLayout(new BorderLayout());
		
		// highlight the first day of each month
		if (this.day.isFirstDay()) {
			dateBox.setBackground(Color.yellow);
		}
		else {
			dateBox.setBackground(Color.white);
		}		
		
		// add events and holidays to dateBox
		eventNames = this.day.evntNames();
		String eventsText = "<html>";
		events = new JLabel("", SwingConstants.CENTER);
				
		if (this.day.isHoliday()) {
			eventsText += ("<br>" + this.day.getHolidayName() + "<br>");
		}
		
		eventsText += "<html>";
		events.setText(eventsText);
		events.setFont(new Font(Font.SERIF, Font.BOLD + Font.ITALIC, 11));
		events.setForeground(Color.red);
		dateBox.add(events, BorderLayout.CENTER);
		
		// set borders and add dateBox to the DayPanel
		dateBox.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.red.darker()));
		this.add(dateBox, BorderLayout.CENTER);
		
		this.setBorder(new SoftBevelBorder(SoftBevelBorder.RAISED));
		this.setPreferredSize(new Dimension(95, 80));
	}
	
	public Day getDay() {
		return this.day;
	}
	
	
	public void setEventText() {
		eventNames = this.day.evntNames();
		String eventsText = "<html>";
				
		if (this.day.isHoliday()) {
			eventsText += ("<br>" + this.day.getHolidayName() + "<br>");
		}
		for (int i = 0; i < eventNames.size(); i++) {
			eventsText += ("<br>" + eventNames.get(i) + "<br>");
		}
		
		eventsText += "<html>";
		events.setText(eventsText);
	}
	
	// Setter for text color
	public void setTextColor(String color) {
		switch (color) {
			case "Red":
				textColor = Color.red;
				break;
			case "Blue":
				textColor = Color.blue;
				break;
			case "Green":
				textColor = Color.green;
				break;
			case "Purple":
				textColor = Color.magenta;
				break;
			case "Black":
				textColor = Color.black;
				break;
		}
		events.setForeground(textColor);
	}
	
	// Set size of DayPanel to month view size
	public void setMonthView() {
		this.setPreferredSize(new Dimension(95, 80));
	}
	
	// Set size of DayPanel to week view size
	public void setWeekView() {
		this.setPreferredSize(new Dimension(95, 390));
	}
	
	// Set size of DayPanel to day view size
	public void setDayView() {
		this.setPreferredSize(new Dimension(695, 450));
	}
}



package assignment2;

import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SidePanel extends JPanel {
	private CalendarFrame calFrame;
	private JPanel top;
	private JPanel middle;
	private JPanel bottom;
	
	String[] colorOptions = {"Red", "Blue", "Green", "Purple", "Black"};
	DefaultListModel<String> events = new DefaultListModel<>();
	
	public SidePanel(CalendarFrame calFrame) {
		this.calFrame = calFrame;
		this.setLayout(new BorderLayout());
		// this.setLayout(new GridLayout(3, 1, 0, 10));
		top = new JPanel(new BorderLayout(0, 10));
		
		// create the title of side panel
		JLabel sidePanelTitle = new JLabel("Customize Calendar");
		sidePanelTitle.setFont(new Font("Serif", Font.BOLD, 18));
		sidePanelTitle.setHorizontalAlignment(SwingConstants.CENTER);
		
		// create another JPanel for adding event and date
		JPanel addEventPanel = new JPanel();
		addEventPanel.setLayout(new FlowLayout());
		
		// add all components (2 labels and their corresponding text fields, and a button) to addEventPanel
		JLabel eventNameLabel = new JLabel("Event Name");
		final JTextField eventName = new JTextField(10);
		JLabel eventDateLabel = new JLabel("Event Date");
		final JTextField eventDate = new JTextField(10);
		final JButton addButton = new JButton("Add Event");
		
		addEventPanel.add(eventNameLabel);
		addEventPanel.add(eventName);
		addEventPanel.add(eventDateLabel);
		addEventPanel.add(eventDate);
		addEventPanel.add(addButton);
		
		top.add(sidePanelTitle, BorderLayout.NORTH);
		top.add(addEventPanel, BorderLayout.CENTER);
		
		// create dropdown menu to change text color and add to middle panel
		middle = new JPanel(new FlowLayout());
		JLabel changeText = new JLabel("Change Text Color");
		JComboBox colorMenu = new JComboBox(colorOptions);
		
		middle.add(changeText);
		middle.add(colorMenu);
		top.add(middle, BorderLayout.SOUTH);
		
		// create panel for storing history of events and add to bottom panel
		bottom = new JPanel(new BorderLayout(0, 5));
		JLabel eventHistory = new JLabel("Event History", SwingConstants.CENTER);
		eventHistory.setFont(new Font("Serif", Font.BOLD, 16));
		JList<String> history = new JList<>(events);
		JScrollPane scrollPane = new JScrollPane(history, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		scrollPane.getVerticalScrollBar().setUnitIncrement(15);
		scrollPane.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE);
		JButton deleteButton = new JButton("Delete Event");
		
		bottom.add(eventHistory, BorderLayout.NORTH);
		bottom.add(scrollPane, BorderLayout.CENTER);
		bottom.add(deleteButton, BorderLayout.SOUTH);
		
		// add action listener for add event button
		addButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				CalendarEvent newEvent = new CalendarEvent(eventName.getText(), eventDate.getText());
				if (!newEvent.checkDate()) {
					JOptionPane.showMessageDialog(null, "Invalid date, please try again", "ERROR", JOptionPane.INFORMATION_MESSAGE);
					eventDate.setText("");
				}
				else {
					// add event to that day with correct text color, then add event to the history JList
					calFrame.getMonthFrame(newEvent.getMonthNum()).getDayPanel(newEvent.getDayNum()).getDay().addCalendarEvent(newEvent);
					calFrame.getMonthFrame(newEvent.getMonthNum()).getDayPanel(newEvent.getDayNum()).setEventText();
					calFrame.getMonthFrame(newEvent.getMonthNum()).getDayPanel(newEvent.getDayNum()).setTextColor((String)colorMenu.getSelectedItem());
					events.addElement(newEvent.eventHistoryString());
					// clear text fields
					eventName.setText("");
					eventDate.setText("");
				}
			}
		});
		
		// add action listener for delete event button
		deleteButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (history.isSelectionEmpty()) {
					JOptionPane.showMessageDialog(null, "You have no events to delete.", "ERROR", JOptionPane.INFORMATION_MESSAGE);
					return;
				}
				
				// remove event from calendar
				String[] tokens = history.getSelectedValue().split(", ");
				CalendarEvent toDelete = new CalendarEvent(tokens[0], tokens[1]);
				calFrame.getMonthFrame(toDelete.getMonthNum()).getDayPanel(toDelete.getDayNum()).getDay().deleteCalendarEvent(tokens[0], tokens[1]);
				calFrame.getMonthFrame(toDelete.getMonthNum()).getDayPanel(toDelete.getDayNum()).setEventText();
				
				// remove event from history
				int selectedIndex = history.getSelectedIndex();
				events.remove(selectedIndex);
			}
		});
		
		this.add(top, BorderLayout.NORTH);
		this.add(bottom, BorderLayout.CENTER);
	}
}


package assignment2;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class CalendarEvent {
	private String eventName;
	private String eventDate;
	
	// constructor for CalendarEvent
	public CalendarEvent(String name, String date) {
		eventName = name;
		eventDate = date;
	}
	
	// This method checks if entered date was valid (only acceptable format is MM/DD/YYYY)
	public boolean checkDate() {
		int monthNum;
		int[] daysInEachMonth = new int[] {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
		
		// check if date format is correct
		SimpleDateFormat df = new SimpleDateFormat("mm/dd/yyyy");
		try {
			df.parse(this.eventDate);
		}
		catch(ParseException e) {
			return false;
		}
		// check if actual date is valid
		String tokens[] = this.eventDate.split("/");
		if (Integer.parseInt(tokens[0]) < 1 || Integer.parseInt(tokens[0]) > 12) {
			return false;
		}
		else {
			monthNum = Integer.parseInt(tokens[0]);
		}
		if (Integer.parseInt(tokens[1]) < 1 || Integer.parseInt(tokens[1]) > daysInEachMonth[monthNum - 1]) {
			return false;
		}
		if (Integer.parseInt(tokens[2]) != 2019 && Integer.parseInt(tokens[2]) != 19) {
			return false;
		}
		
		return true;
	}
	
	// This method combines the event name and event date into a single string for the event history list
	public String eventHistoryString() {
		return eventName + ", " + eventDate;
	}
	
	// This method returns the event name
	public String getEventName() {
		return this.eventName;
	}
	
	// This method returns the event date
	public String getEventDate() {
		return this.eventDate;
	}
	
	// This method returns the month number
	public int getMonthNum() {
		String[] tokens = this.eventDate.split("/");
		return Integer.parseInt(tokens[0]);
	}
	
	// This method returns day number
	public int getDayNum() {
		String[] tokens = this.eventDate.split("/");
		return Integer.parseInt(tokens[1]);
	}
	
	// Checks if 2 CalendarEvent objects
	public boolean equalCalendarEvent(CalendarEvent calEvent) {
		if (this.eventName.equals(calEvent.getEventName()) && this.eventDate.equals(calEvent.getEventDate())) {
			return true;
		}
		return false;
	}
}


package assignment2;

import java.util.ArrayList;

public class Day {
	// attributes
	private int dayOfMonth;
	private String month;
	private boolean firstDay;
	private boolean holiday;
	private String holidayName;
	private ArrayList<CalendarEvent> events;
	
	// Day constructor
	public Day(int dayOfMonth, String month) {
		this.dayOfMonth = dayOfMonth;
		this.month = month;
		this.events = new ArrayList<CalendarEvent>();
		
		// check if day is first day of the month
		if (this.dayOfMonth == 1) {
			firstDay = true;
		}
		else {
			firstDay = false;
		}
		
		// check if day is a holiday and if yes, set the name of the holiday
		if (this.month == "January" && this.dayOfMonth == 1) {
			this.holiday = true;
			this.holidayName = "New Year's Day";
		}
		else if (this.month == "January" && this.dayOfMonth == 21) {
			this.holiday = true;
			this.holidayName = "Martin Luther King Jr. Day";
		}
		else if (this.month == "February" && this.dayOfMonth == 18) {
			this.holiday = true;
			this.holidayName = "President's Day";
		}
		else if (this.month == "May" && this.dayOfMonth == 27) {
			this.holiday = true;
			this.holidayName = "Memorial Day";
		}
		else if (this.month == "July" && this.dayOfMonth == 4) {
			this.holiday = true;
			this.holidayName = "Independence Day";
		}
		else if (this.month == "September" && this.dayOfMonth == 2) {
			this.holiday = true;
			this.holidayName = "Labor Day";
		}
		else if (this.month == "October" && this.dayOfMonth == 14) {
			this.holiday = true;
			this.holidayName = "Columbus Day";
		}
		else if (this.month == "November" && this.dayOfMonth == 11) {
			this.holiday = true;
			this.holidayName = "Veterans Day";
		}
		else if (this.month == "November" && this.dayOfMonth == 28) {
			this.holiday = true;
			this.holidayName = "Thanksgiving";
		}
		else if (this.month == "December" && this.dayOfMonth == 25) {
			this.holiday = true;
			this.holidayName = "Christmas";
		}
		else {
			this.holiday = false;
			this.holidayName = "";
		}
	}
	
	// Getter for day of month
	public int getDayOfMonth() {
		return this.dayOfMonth;
	}
	
	// Getter for month name
	public String getMonth() {
		return this.month;
	}
	
	// This method checks if it's the first day of month
	public boolean isFirstDay() {
		return firstDay;
	}
	
	// This method returns true if the day is a holiday, and false if not
	public boolean isHoliday() {
		return this.holiday;
	}
	
	// This method returns the name of holiday
	public String getHolidayName() {
		return this.holidayName;
	}
	
	// This method adds a calendar event to events arraylist
	public void addCalendarEvent(CalendarEvent newEvent) {
		events.add(newEvent);
	}
	
	// This method deletes a calendar event from events arraylist
	public void deleteCalendarEvent(String eventName, String eventDate) {
		CalendarEvent toDelete = new CalendarEvent(eventName, eventDate);
		for (int i = 0; i < events.size(); i++) {
			if (events.get(i).equalCalendarEvent(toDelete)) {
				events.remove(i);
				break;
			}
		}
	}
	
	// This method returns an array list of event strings
	public ArrayList<String> eventStrings() {
		ArrayList<String> evntStrings = new ArrayList<>();
		for (int i = 0; i < events.size(); i++) {
			evntStrings.add(events.get(i).eventHistoryString());
		}
		return evntStrings;
	}
	
	// This method returns an array list of event names
	public ArrayList<String> evntNames() {
		ArrayList<String> eventNames = new ArrayList<>();
		for (int i = 0; i < events.size(); i++) {
			eventNames.add(events.get(i).getEventName());
		}
		return eventNames;
	}
	
	// for debugging
	public void printEvents() {
		for (int i = 0; i < events.size(); i++) {
			System.out.println(events.get(i).getEventName());
		}
	}
}


package assignment2;

public class Month {
	// attributes
	private int numOfDays;
	private int monthNum;
	private String monthName;
	private Day[] days;
	
	// Month constructor
	public Month(int monthNum, int numOfDays, String monthName) {
		this.numOfDays = numOfDays;
		this.monthNum = monthNum;
		this.monthName = monthName;
		days = new Day[numOfDays];
		
		// create a Day object for each day of the month
		for (int i = 0; i < numOfDays; i++) {
			days[i] = new Day(i + 1, this.monthName);
		}
	}
	
	// getter for numOfDays
	public int getNumOfDays() {
		return this.numOfDays;
	}
	
	// getter for month name
	public String getMonthName() {
		return this.monthName;
	}
	
	/* This method calculates what day of the week the 1st of the month falls on (0 - Sunday, 1 - Monday, 2 - Tuesday, etc...)
	   Algorithm: https://www.reddit.com/r/LearnUselessTalents/comments/23l668/request_how_to_determine_that_day_of_the_week_a
	*/
	public int getFirstDayOfMonth() {
		int arr[] = {6, 2, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
		return (19 / 4 + 19 + (arr[this.monthNum - 1]) + 1) % 7;
	}
	
	// get a specific day from the array of days
	public Day getDay(int whichDay) {
		return days[whichDay];
	}
}